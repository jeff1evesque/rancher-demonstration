#!/bin/bash

## local variables
AGENT_VERSION="$1"
SERVER_IP="$2"
RANCHER_PORT="$3"
SLEEP_TIME='300'
OPERATING_SYSTEM=$(uname -s)
RANCHER_URL="$SERVER_IP:$RANCHER_PORT"

## detect os
case "${OPERATING_SYSTEM}" in
    Linux*)
        DISTRO_TYPE='linux';;
    Darwin*)
        DISTRO_TYPE='unix';;
    CYGWIN*)
        DISTRO_TYPE='windows';;
    MINGW*)
        DISTRO_TYPE='windows';;
    *)
        echo ''
        echo 'Error: operating system not known, please open an issue:'
        echo ''
        echo 'https://github.com/jeff1evesque/machine-learning/issues/new'
        echo ''
        exit 1
esac

##
## error detection: capture error then exit
##
## Note: this was intended to target the below 'ACCESS=$(...) && break'.
##
set -e

SLEEPER=0
while true
do
    ## generate access + secret key:
    ##
    ## Note: exporting environment eliminates the need to explicitly provide
    ##       environment variable to the 'rancher' command.
    ##
    ## Note: 'curl' response for ACCESS is json:
    ##
    ##     https://github.com/rancher/rancher/issues/4961#issuecomment-222598633
    ##
    ACCESS=$(curl -k "http://${RANCHER_URL}"/ping) && break

    if [ "$SLEEPER" = "$SLEEP_TIME" ]; then
        echo -e "\nSleep time ${SLEEP_TIME}s exceeded, install terminating.\n"
        exit 1
    fi
done

## login
LOGINRESPONSE=$(curl -s "https://${RANCHER_URL}/v3-public/localProviders/local?action=login" -H 'content-type: application/json' --data-binary '{"username":"admin","password":"admin"}')
echo -e "\n\nLOGINRESPONSE: ${LOGINRESPONSE}\n\n"
LOGINTOKEN=$(echo "$LOGINRESPONSE}" | python3 -c 'import json,sys;obj=json.load(sys.stdin.read().replace("\0", ""));print(obj["token"])')

## change password
curl -s "https://${RANCHER_URL}/v3/users?action=changepassword" \
    -H 'content-type: application/json' \
    -H "Authorization: Bearer $LOGINTOKEN" \
    --data-binary '{"currentPassword": "admin", "newPassword": "newpassword"}'
    --insecure

## create API key
APIRESPONSE=$(curl -s "https://${RANCHER_URL}/v3/token" -H 'content-type: application/json' -H "Authorization: Bearer $LOGINTOKEN" --data-binary '{"type":"token","description":"automation"}' --insecure)
echo -e "\n\nAPIRESPONSE: ${APIRESPONSE}\n\n"

## Extract and store token
APITOKEN=$(echo "$APIRESPONSE" | python3 -c 'import json,sys;obj=json.load(sys.stdin.read().replace("\0", ""));print(obj["token"])')

# create cluster
CLUSTERRESPONSE=$(curl -s "https://${RANCHER_URL}/v3/cluster" -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"dockerRootDir":"/var/lib/docker","enableNetworkPolicy":false,"type":"cluster","rancherKubernetesEngineConfig":{"addonJobTimeout":30,"ignoreDockerVersion":true,"sshAgentAuth":false,"type":"rancherKubernetesEngineConfig","authentication":{"type":"authnConfig","strategy":"x509"},"network":{"type":"networkConfig","plugin":"canal"},"ingress":{"type":"ingressConfig","provider":"nginx"},"monitoring":{"type":"monitoringConfig","provider":"metrics-server"},"services":{"type":"rkeConfigServices","kubeApi":{"podSecurityPolicy":false,"type":"kubeAPIService"},"etcd":{"snapshot":false,"type":"etcdService","extraArgs":{"heartbeat-interval":500,"election-timeout":5000}}}},"name":"yournewcluster"}' --insecure)
echo -e "\n\nCLUSTERRESPONSE: ${CLUSTERRESPONSE}\n\n"

# Extract clusterid to use for generating the docker run command
CLUSTERID=$(echo $CLUSTERRESPONSE | python3 -c 'import json,sys;obj=json.load(sys.stdin.read().replace("\0", ""));print(obj["id"])')

# Create token
curl -s "https://${RANCHER_URL}/v3/clusterregistrationtoken" -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --data-binary '{"type":"clusterRegistrationToken","clusterId":"'$CLUSTERID'"}' --insecure > /dev/null

# Set role flags
ROLEFLAGS="--etcd --controlplane --worker"

# Generate nodecommand
AGENTCMD=$(curl -s "http://${RANCHER_URL}/v3/clusterregistrationtoken?id='$CLUSTERID'" -H 'content-type: application/json' -H "Authorization: Bearer $APITOKEN" --insecure | jq -r '.data[].nodeCommand' | head -1)

# Concat commands
DOCKERRUNCMD="$AGENTCMD $ROLEFLAGS"

# Echo command
echo "$DOCKERRUNCMD"